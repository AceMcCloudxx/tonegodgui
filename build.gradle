// Gradle build script for the tonegodgui project

plugins {
    id 'java-library'
    id 'maven-publish'
    id 'signing'
}

description = 'Tonegod\'s graphical user-interface library for jMonkeyEngine.'
ext {
    group = 'com.github.stephengold'
    artifact = 'tonegodgui'
    version = '0.1.7-SNAPSHOT'
    baseName = "${artifact}-${version}" // for POM and class JAR
    jme3Version='3.5.0-beta5'
    websiteUrl = 'https://github.com/stephengold/tonegodgui'
}

sourceCompatibility = '1.7'
targetCompatibility = JavaVersion.VERSION_1_8

repositories {
    //mavenLocal()
    mavenCentral()
}

dependencies {
    api 'org.jmonkeyengine:jme3-core:' + jme3Version
}

tasks.withType(JavaCompile) { // compile-time options:
    options.compilerArgs << '-Xdiags:verbose'
    options.compilerArgs << '-Xlint:unchecked'
    //options.deprecation = true
    options.encoding = 'UTF-8'
}

javadoc {
    // Disable doclint for JDK15+ to avoid "no comment" warnings.
    if (JavaVersion.current().isCompatibleWith(JavaVersion.VERSION_15)) {
        options.addStringOption('Xdoclint:none', '-quiet')
    }
}

// publishing tasks

task('install') {
    dependsOn 'publishMavenPublicationToMavenLocal'
    description 'Installs Maven artifacts to the local repository.'
}
task('release') {
    dependsOn 'publishMavenPublicationToOSSRHRepository'
    description 'Stages Maven artifacts to Sonatype OSSRH.'
}

jar {
    archiveBaseName = project.ext.baseName
}
task javadocJar(type: Jar) {
    archiveBaseName = project.ext.baseName
    archiveClassifier = 'javadoc'
    dependsOn 'javadoc'
    description 'Creates a JAR of javadoc.'
    from javadoc.destinationDir
}
task sourcesJar(type: Jar) {
    archiveBaseName = project.ext.baseName
    archiveClassifier = 'sources'
    description 'Creates a JAR of sourcecode.'
    from sourceSets.main.allJava
}

build.dependsOn('pom', 'pomAsc')
task('pom', type: Copy) {
    dependsOn 'generatePomFileForMavenPublication'
    description 'Copies the Maven POM to build/libs.'
    from "${buildDir}/publications/maven/pom-default.xml"
    into "${buildDir}/libs"
    rename 'pom-default.xml', project.ext.baseName + '.pom'
}
task('pomAsc', type: Copy) {
    dependsOn 'signMavenPublication'
    description 'Copies the signature of the Maven POM to build/libs.'
    from "${buildDir}/publications/maven/pom-default.xml.asc"
    into "${buildDir}/libs"
    rename 'pom-default.xml.asc', project.ext.baseName + '.pom.asc'
}

publishing {
    publications {
        maven(MavenPublication) {
            artifact javadocJar
            artifact sourcesJar
            artifactId artifact
            from components.java
            groupId project.ext.group
            pom {
                description = project.description
                developers {
                    developer {
                        name = 'Cris aka "t0neg0d"'
                    }
                }
                inceptionYear = '2012'
                licenses {
                    license {
                        distribution = 'repo'
                        name = 'FreeBSD License'
                        url = 'https://opensource.org/licenses/BSD-2-Clause'
                    }
                }
                name = project.ext.group + ':' + artifact
                scm {
                    connection = 'scm:git:git://github.com/stephengold/tonegodgui.git'
                    developerConnection = 'scm:git:ssh://github.com:stephengold/tonegodgui.git'
                    url = project.ext.websiteUrl + '/tree/master'
                }
                url = project.ext.websiteUrl
            }
            version project.ext.version
        }
    }
    // Staging to OSSRH relies on the existence of 2 properties
    // (ossrhUsername and ossrhPassword)
    // which should be stored in ~/.gradle/gradle.properties
    repositories {
        maven {
            credentials {
                username = project.hasProperty('ossrhUsername') ? ossrhUsername : 'Unknown user'
                password = project.hasProperty('ossrhPassword') ? ossrhPassword : 'Unknown password'
            }
            name = 'OSSRH'
            url = 'https://oss.sonatype.org/service/local/staging/deploy/maven2'
        }
    }
}
generateMetadataFileForMavenPublication.dependsOn('pom')
publishMavenPublicationToMavenLocal.doLast {
    println 'installed locally as ' + project.ext.baseName
}

// signing tasks

// Signing relies on the existence of 3 properties
// (signing.keyId, signing.password, and signing.secretKeyRingFile)
// which should be stored in ~/.gradle/gradle.properties

signing {
    sign publishing.publications.maven
}
tasks.withType(Sign) {
    onlyIf { project.hasProperty('signing.keyId') }
}
